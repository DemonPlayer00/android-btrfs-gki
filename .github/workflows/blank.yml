name: Build BTRFS Module for GKI (Optimized)

on:
  workflow_dispatch:
    inputs:
      kernel_tag:
        description: 'Kernel tag to build (default: android12-5.10.168_r00)'
        required: false
        default: 'android12-5.10.168_r00'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32z1-dev libelf-dev liblz4-tool libncurses-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y libncurses6:i386
          sudo apt-get install -y clang lld gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y libssl-dev

      - name: Cache kernel build
        uses: actions/cache@v3
        with:
          path: |
            kernel_source/common/out
            .ccache
          key: ${{ runner.os }}-kernel-build-${{ github.event.inputs.kernel_tag || 'android12-5.10.168_r00' }}
          restore-keys: |
            ${{ runner.os }}-kernel-build-

      - name: Download Android kernel source
        run: |
          KERNEL_TAG=${{ github.event.inputs.kernel_tag || 'android12-5.10.168_r00' }}
          mkdir -p kernel_source
          cd kernel_source
          if [ ! -d "common" ]; then
            git clone https://android.googlesource.com/kernel/common -b $KERNEL_TAG --depth 1
          else
            echo "Using cached kernel source"
          fi

      - name: Set up environment variables
        run: |
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "CCACHE_DIR=$(pwd)/.ccache" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=50G" >> $GITHUB_ENV
          echo "CLANG_PATH=$(which clang)" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV

      - name: Configure ccache
        run: |
          ccache -M $CCACHE_MAXSIZE
          ccache -z
          ccache -s

      - name: Configure kernel
        run: |
          cd kernel_source/common
          export PATH=$(dirname $CLANG_PATH):$PATH
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE gki_defconfig
          echo "CONFIG_BTRFS_FS=m" >> out/.config
          echo "CONFIG_BTRFS_FS_POSIX_ACL=y" >> out/.config
          echo "CONFIG_BTRFS_FS_SECURITY=y" >> out/.config
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE CC=clang prepare
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE CC=clang scripts
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE CC=clang olddefconfig

      - name: Build minimal kernel for symbols
        run: |
          cd kernel_source/common
          export PATH=$(dirname $CLANG_PATH):$PATH
          make -j$(nproc) O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE CC=clang \
            KBUILD_MODULES=1 \
            kernel/ mm/ fs/ lib/ arch/$ARCH/kernel/

      - name: Verify Module.symvers exists
        run: |
          if [ ! -f "kernel_source/common/out/Module.symvers" ]; then
            echo "Module.symvers not found!"
            ls -la kernel_source/common/out || true
            exit 1
          fi

      - name: Build BTRFS module
        run: |
          cd kernel_source/common
          export PATH=$(dirname $CLANG_PATH):$PATH
          export CC="ccache $CLANG_PATH"
          make -j$(nproc) O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE CC=$CC \
            M=fs/btrfs \
            modules

      - name: Verify BTRFS module exists
        run: |
          if [ ! -f "kernel_source/common/out/fs/btrfs/btrfs.ko" ]; then
            echo "BTRFS module not found!"
            ls -la kernel_source/common/out/fs/btrfs || true
            exit 1
          fi

      - name: Collect build artifacts
        run: |
          mkdir -p artifacts
          cp kernel_source/common/out/fs/btrfs/btrfs.ko artifacts/
          cp kernel_source/common/out/.config artifacts/config
          cp kernel_source/common/out/Module.symvers artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: btrfs-module
          path: artifacts/
          retention-days: 7

      - name: Show ccache stats
        run: ccache -s
